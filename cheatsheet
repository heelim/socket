#include <sys/stat.h>
#include <fcntl.h>
int open(const char *path, int oflag, [mode_t mode]);
	path : file path
	oflag : purpose of file open
		O_RDONLY
		O_WRONLY
		O_RDWR

		O_APPEND
		O_CREAT
		O_EXCL
		O_TRUNC
		O_NONBLOCK
		O_SYNC
	mode : set information about file permission

	return : file descripter

ssize_t read(int fd, void *buf, size_t count);
ssize_t write(int fd, const void *buf, size_t count);
	fd : file descripter
	buf : data pointer
	count : max length of data

	return : data size in byte (successfully read/write )

int close(int fd);
	fd :  file descripter

	return : 0(success), 1(fail)

#include <sys/socket.h>
int socket(int domain, int type, int protocol);
	domain : protocol family
		AF_INET : IPv4
		AF_INET6 : IPv6
		AF_UNIX / AF_LOCAL : internal host
	type : socket type
		SOCK_STREAM : sequential, stable connection oriented type
		SOCK_DGRAM : connectionless oriented type
		SOCK_RAW : custom 4-layer
	protocol : socket protocol
		IPPROTO_TCP : tcp
		IPPROTO_UDP : udp

	return : file descripter of created socket(success), -1(fail)

#include <sys/types.h>
#include <sys/socket.h>
struct sockaddr {
	uint8_t sa_len;			//address length
	sa_family_t sa_family;	//address family
	char sa_data[14];		//address
}
struct sockaddr_in {
	uint8_t sin_len;		//address length
	sa_family_t sin_family;	//address family
	in_port_t sin_port;		//port num

	struct in_addr sin_addr;//IPv4 address
	char sin_zero[8]		//not used (To match the length with sockaddr)
}
struct in_addr { 
	uint32_t s_addr;		//ip address
}

#include <sys/types.h>
#include <sys/socket.h>
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
	sockfd : file descripter of socket
	addr : sockaddr pointer
	addrlen : size of sockaddr struct

	return : 0(success), 1(fail)
//we should cast sockaddr_in struct into sockaddr struct

#include <netinet/in.h>
uint32_t htonl(uint32_t hostlong);
uint16_t htons(uint16_t hostshort);
uint32_t ntohl(uint32_t netlong);
uint16_t ntohs(uint16_t netshort);

#include <netinet/in.h>
int inet_addr(const char *cp);		//convert ip address string into network byte order in_addr_t
int inet_network(const char *cp);	//convert ip address string into host btye order in_addr_t
int inet_aton(const char *cp, struct in_addr *inp);	//convert ip address string into network byte order inp
int *inet_ntoa(struct in_addr in);	//convert network byte ordered in_addr struct address into ip address string
int inet_pton(int af, const char *src, void *dst);	//convert src string address into dst
const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);	//convert src string address into dst
	af : AF_INET - IPv4, AF_INET6 - IPv6

#include <sys/types.h>
#include <sys/socket.h>
int listen(int sockfd, int backlog);
	sockfd : file descripter of socket
	backlog : ?

	return : 0(success), -1(fail)

int accept(int sockfd, struct sockaddr *addr, socket_t *addrlen);
	 sockfd : file descripter of socket
	 addr : space for saving address of connection requesting opponent
	 addrlen : length of address

	 return : socket for communication(success), -1(fail)

int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
	sockfd : file descripter of socket
	addr : address of target process
	addrlen : length of address

	return : 0(success), -1(fail)

	